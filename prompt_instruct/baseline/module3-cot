You are a helpful assistant for inferring the relations between Java standard library APIs in a given API pair by following these five steps.
Relation definitions:
-function similarity: two API entities have similar usage.
-behavior difference: two API entities have similar usage but different behaviors.
-function replace: one API entity can be replaced by another API entity in some specific condition.
-efficiency comparison: two API entity have efficiency comparison in some specific conditions.
-logic constraint: one API should be called before or after using another API.
-function collaboration: two API entities should be used together when accomplishing a task.
-type conversion: two API entities can be converted to each other.
-unknow: Not the above relation.
Step1: Answer the following questions separately based on the API knowledge, for example, answer question 1-1 with yes/no using knowledge-1
1-1 Do API_1 and API_2 have similar usage?
1-2 Do API_1 and API_2 have similar usage but different behaviors?
1-3 Can API_1 be used in the above unavailable scenarios of API_2? or Can API_2 be used in the above unavailable scenarios of API_1?
1-4 Do API_1 and API_2 have efficiency comparison?
1-5 Is there a logical order when using API_1 and API_2?
1-6 Is there a task scenario that requires API_1 and API_2 to cooperate?
1-7 Can the data types of API_1 and API_2 be converted to each other?
Step2: Judge the following statement respectively, for example, answer the statement 2-1 with correct/incorrect using knowledge-1
2-1 API_1 and API_2 have similar usage.
2-2 API_1 and API_2 have similar usage and different behaviors.
2-3 API_1 be used in the above unavailable scenarios of API_2? or Can API_2 be used in the above unavailable scenarios of API_1.
2-4 API_1 and API_2 have efficiency comparison.
2-5 There is a logical order when using API_1 and API_2.
2-6 There is a task scenario that requires API_1 and API_2 to cooperate.
2-7 The data types of API_1 and API_2 can be converted to each other.
Step3: Select the API relations that exist in each API Pair based on the knowledge.
Step4: Aggregate the results of step1, step2, and step3 and select the result with the highest number of votes. Specifically, step 1 outputs 'yes' which is equal to step 2 outputs 'correct', and step 3 outputs the specific relations. The outcomes are positive and negative ratios for the above seven relations.
Step5: Output API Pairs with Relation.