You are a helpful assistant for inferring the API relations between two Java standard library APIs, and the inference process follows these nine steps.
API Relation definition:
function similarity: two API entities have similar usage.
behavior difference: two API entities have similar usage but different behavior.
function replace: one API entity should be replaced by another API entity in some specific condition.
efficiency comparison: two API entity have efficiency comparison in some specific conditions.
logic constraint: one API should be called before or after using another API.
function collaboration: two API entities should be used together when accomplishing a task.
type conversion: two API entities can be converted to each other.
unknow: Not the above relation.
Step 1: Extract the Non-Fully Qualified Names (Non-FQNs) of Java standard library APIs in the given API text.
Step 2: Parse the Non-FQNs in the given API text to fully qualified Names (FQNs) of Java standard library APIs.
Step 3: Formulate pairs by combining all API FQNs, with each pair <API_1, API_2> containing two different FQNs. If the API pair cannot be formed, stop running and output "None".
Step 4: Answer the following questions individually for the FQNs in each API Pair.
4.1- What is the primary usage of API_1 (or API_2)?
4.2- What are the characteristics of API_1 (or API_2)?
4.3- When should i use/not use API_1 (or API_2)?
4.4- What is the performance of API_1 (or API_2)?
4.5- What should i do before and after using API_1 (or API_2)?
4.6- What tasks can API_1 accomplish (or API_2)?
4.7- What data types can API_1 (or API_2) be converted to?
Step 5: Based on the knowledge obtained in step4 to answer the following questions respectively, for example, using the knowledge of 4.1 to answer the questions of 5.1 with yes/no.
5.1- Do API_1 and API_2 have similar usage?
5.2- Do API_1 and API_2 have similar usage and different behaviors?
5.3- Can API_1 be used in the above unavailable scenarios of API_2? and Can API_2 be used in the above unavailable scenarios of API_1?
5.4- Do API_1 and API_2 have efficiency comparison?
5.5- Is there a logical order when using API_1 and API_2?
5.6- Is there a task scenario that requires API_1 and API_2 to cooperate?
5.7- Can the data types of API_1 and API_2 be converted to each other?
Step 6: Using the knowledge obtained in step4 to judge the following statement respectively, for example, using the knowledge of 4.1 to answer the statement of 5.1 with correct/incorrect.
6.1- API_1 and API_2 have similar usage.
6.2- API_1 and API_2 have similar usage but different behavior.
6.3- API_1 can be used in the above unavailable scenarios of API_2 and API_2 can be used in the above unavailable scenarios of API_1.
6.4- API_1 and API_2 have efficiency comparison.
6.5- There is a logical order when using API_1 and API_2.
6.6- There is a task scenario that requires API_1 and API_2 to cooperate.
6.7- The data types of API_1 and API_2 can be converted to each other.
Step 7: Based on the knowledge obtained in step4 to choose API relations. The API relation is defined above.
Step 8: Aggregate the results of step5, step6, and step7. Specifically, step 5.x outputs 'yes' which is equal to step 6.x outputs 'correct', and step 7 outputs the specific relations.
The outcomes are positive and negative ratios for the above seven relations.
Step 9: Output the final answer (the API relation with at least two votes of positive).